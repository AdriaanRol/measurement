import numpy as npimport qtimport hdf5_data as h5import measurement.lib.config.adwins as adwins_cfgimport measurement.lib.measurement2.measurement as m2from measurement.lib.AWG_HW_sequencer_v2 import Sequencefrom measurement.lib.measurement2.adwin_ssro import ssroclass SequenceSSRO(ssro.IntegratedSSRO):    mprefix = 'SequenceSSRO'    awg = None    mwsrc = None    awgcfg_module = None    awgcfg_args = []    awgcfg_kws = {}        def __init__(self, name):        ssro.IntegratedSSRO.__init__(self, name)                self.seq = Sequence(name)        self.params['measurement_type'] = self.mprefix                   def setup(self, wait_for_awg=True):        ssro.IntegratedSSRO.setup(self)                self.mwsrc.set_iq('on')        self.mwsrc.set_pulm('on')        self.mwsrc.set_frequency(self.params['mw_frq'])        self.mwsrc.set_power(self.params['mw_power'])        self.mwsrc.set_status('on')                self.awg.set_runmode('SEQ')        self.awg.start()                if wait_for_awg:            awg_ready = False            while not awg_ready:                try:                    if self.awg.get_state() == 'Waiting for trigger':                        awg_ready = True                except:                    # usually means awg is still busy and doesn't respond                    pass                qt.msleep(0.5)            def sequence(self):        pass            def generate_sequence(self, send=True, program=True):                  self.awgcfg_module.configure_sequence(self.seq, *self.awgcfg_args, **self.awgcfg_kws)                        self.sequence()                self.seq.set_instrument(self.awg)        self.seq.set_clock(1e9)        self.seq.set_send_waveforms(send)        self.seq.set_send_sequence(program)        self.seq.set_program_channels(True)        self.seq.set_start_sequence(False)        self.seq.force_HW_sequencing(True)        self.seq.send_sequence()                    def finish(self):        ssro.IntegratedSSRO.finish(self)                self.awg.stop()        self.awg.set_runmode('CONT')        self.mwsrc.set_status('off')        self.mwsrc.set_iq('off')        self.mwsrc.set_pulm('off')                # class SequenceSSRO class DarkESR(SequenceSSRO):    mprefix = 'DarkESR'        def autoconfig(self):        self.params['sequence_wait_time'] = \            int(np.ceil(self.params['pulse_length']/1e3)+10)        SequenceSSRO.autoconfig(self)                    self.params['sweep_name'] = 'MW frq (GHz)'        self.params['sweep_pts'] = (np.linspace(self.params['ssbmod_frq_start'],            self.params['ssbmod_frq_stop'], self.params['pts']) + self.params['mw_frq'])*1e-9        def sequence(self):            # sweep the modulation freq        for i, f in enumerate(                np.linspace(self.params['ssbmod_frq_start'],                    self.params['ssbmod_frq_stop'],                     self.params['pts']) ):            ###################################################################            ename = 'desrseq%d' % i            kw = {} if i < self.params['pts']-1 \                    else {'goto_target': 'desrseq0'}                        self.seq.add_element(ename, trigger_wait = True, **kw)            self.seq.add_pulse('wait',                 channel = self.chan_mw_pm, element = ename,                start = 0, duration = 5000, amplitude = 0)                        self.seq.add_IQmod_pulse(                name = 'mwburst',                 channel = (self.chan_mwI, self.chan_mwI),                element = ename,                 start = 0,                 duration = self.params['pulse_length'],                 start_reference = 'wait',                 link_start_to = 'end',                 frequency = f,                amplitude = self.params['ssbmod_amplitude'])            self.seq.clone_channel(                self.chan_mw_pm,                 self.chan_mwI,                 ename,                start = -self.params['MW_pulse_mod_risetime'],                duration = 2 * self.params['MW_pulse_mod_risetime'],                 link_start_to = 'start',                 link_duration_to = 'duration',                 amplitude = 2.0)            ###################################################################                                     