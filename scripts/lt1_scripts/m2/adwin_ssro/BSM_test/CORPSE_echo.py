import numpy as npimport qtimport measurement.lib.config.adwins as adwins_cfgimport measurement.lib.measurement2.measurement as m2import measurement.lib.config.awgchannels as awgcfg# import the msmt classfrom measurement.lib.measurement2.adwin_ssro import ssrofrom measurement.lib.measurement2.adwin_ssro import sequencefrom measurement.lib.measurement2.adwin_ssro import mbifrom measurement.lib.measurement2.adwin_ssro import mbi_espinclass CORPSEEcho(mbi.MBIMeasurement):    mprefix = 'MBICORPSEEcho'       def sequence(self):                for i in np.arange(self.params['pts']):                       self._MBI_seq_element(el_name='MBI_pulse'+str(i),                    jump_target='spin_control'+str(i),                    goto_target='MBI_pulse'+str(i)+'-0')            if i == self.params['pts'] - 1:                self.seq.add_element(name = 'spin_control'+str(i),                     trigger_wait = True, goto_target = 'MBI_pulse0-0')            else:                self.seq.add_element(name = 'spin_control'+str(i),                    trigger_wait = True)                        # first pi/2 pulse            self.seq.add_IQmod_pulse('first_pi2-'+str(i),                 channel = (self.chan_mwI, self.chan_mwQ),                element = 'spin_control'+str(i),                start = 0,                 duration = int(self.params['AWG_pi2_duration']),                amplitude = self.params['AWG_pi2_amp'],                 frequency = self.params['AWG_pi2_mod_frq'])                #start_reference = last,                #link_start_to='end')            last = 'first_pi2-'+str(i)+'-I'            first = 'first_pi2-'+str(i)+'-I'                                                    # this is the CORPSE pulse            if self.params['pi_type'] == 'CORPSE':                            self.seq.add_IQmod_pulse('CORPSE420-'+str(i),                     channel = (self.chan_mwI, self.chan_mwQ),                    element = 'spin_control'+str(i),                    start = self.params['tau1s'][i],                     duration = int(self.params['AWG_uncond_CORPSE420_duration']),                    amplitude = self.params['AWG_uncond_CORPSE420_amp'],                     frequency = self.params['AWG_uncond_CORPSE_mod_frqs'][i],                    phase = self.params['AWG_2nd_pi2_phases'][i],                    start_reference = last,                    link_start_to='end')                last = 'CORPSE420-'+str(i)+'-I'                           self.seq.add_IQmod_pulse(                    name = 'CORPSE300-'+str(i),                     channel = (self.chan_mwI, self.chan_mwQ),                    element = 'spin_control'+str(i),                    start = 0,                     duration = int(self.params['AWG_uncond_CORPSE300_duration']),                    amplitude = -self.params['AWG_uncond_CORPSE300_amp'],                     frequency = self.params['AWG_uncond_CORPSE_mod_frqs'][i],                    phase = self.params['AWG_uncond_CORPSE_phases'][i],                    start_reference = last,                    link_start_to='end')                last = 'CORPSE300-'+str(i)+'-I'                self.seq.add_IQmod_pulse(                    name = 'CORPSE60-'+str(i),                     channel = (self.chan_mwI, self.chan_mwQ),                    element = 'spin_control'+str(i),                    start = 0,                     duration = int(self.params['AWG_uncond_CORPSE60_duration']),                    amplitude = self.params['AWG_uncond_CORPSE60_amp'],                     frequency = self.params['AWG_uncond_CORPSE_mod_frqs'][i],                    phase = self.params['AWG_uncond_CORPSE_phases'][i],                    start_reference = last,                    link_start_to='end')                last = 'CORPSE60-'+str(i)+'-I'                        ### End of the CORPSE pulse                                    # a normal pi pulse to replace the corpse pi pulse            else:                self.seq.add_IQmod_pulse('pi-'+str(i),                     channel = (self.chan_mwI, self.chan_mwQ),                    element = 'spin_control'+str(i),                    start = self.params['tau1s'][i],                     duration = int(self.params['AWG_pi_duration']),                    amplitude = self.params['AWG_pi_amp'],                     frequency = self.params['AWG_pi_mod_frqs'][i],                    start_reference = last,                    link_start_to='end')                last = 'pi-'+str(i)+'-I'                              # second pi/2 pulse            self.seq.add_IQmod_pulse('second_pi2-'+str(i),                 channel = (self.chan_mwI, self.chan_mwQ),                element = 'spin_control'+str(i),                start = self.params['tau2s'][i],                 duration = int(self.params['AWG_2nd_pi2_durations'][i]),                amplitude = self.params['AWG_2nd_pi2_amps'][i],                 frequency = self.params['AWG_2nd_pi2_mod_frqs'][i],                phase = self.params['AWG_2nd_pi2_phases'][i],                start_reference = last,                link_start_to='end')            last = 'second_pi2-'+str(i)+'-I'                        self.seq.clone_channel(self.chan_mw_pm, self.chan_mwI, 'spin_control'+str(i),                    start = self.params['MW_pulse_mod_risetime'],                    duration = 2 * self.params['MW_pulse_mod_risetime'],                     link_start_to = 'start',                     link_duration_to = 'duration',                    amplitude = 2.0)                        # make sure PM is low at the beginning            self.seq.add_pulse('delay_start', self.chan_mw_pm, 'spin_control'+str(i),                    start=-5, duration=5, amplitude=0,                    start_reference = first, #'RO_pulse-0-I',                    link_start_to = 'start')                        self.seq.add_pulse(name='seq_done',                    channel = self.chan_adwin_sync,                    element = 'spin_control'+str(i),                    duration = 10000, #AWG_to_adwin_ttl_trigger_duration,                     amplitude = 2,                    start = 0,                    start_reference= last,#'RO_pulse-'+str(j)+'-I',                    link_start_to='end')            ### class CORPSEEchoclass LongEcho(mbi.MBIMeasurement):    mprefix = 'MBILongCORPSEEcho'       def sequence(self):                for i in np.arange(self.params['pts']):                       self._MBI_seq_element(el_name='MBI_pulse'+str(i),                    jump_target='first_pi2-'+str(i),                    goto_target='MBI_pulse'+str(i)+'-0')            ename = 'first_pi2-'+str(i)            self.seq.add_element(name = ename, trigger_wait = True)                        ### first pi/2 pulse                        # we need a waiting time here, because the minimum element size is 1000 samples            self.seq.add_pulse('wait4_first_pi2-'+str(i),                 channel = self.chan_RF,                element = ename,                start = 0,                amplitude = 0,                duration = 1000)            last = 'wait4_first_pi2-'+str(i)                        self.seq.add_IQmod_pulse('first_pi2-'+str(i),                 channel = (self.chan_mwI, self.chan_mwQ),                element = ename,                start = 0,                 duration = int(self.params['AWG_pi2_duration']),                amplitude = self.params['AWG_pi2_amp'],                 frequency = self.params['AWG_pi2_mod_frq'],                start_reference = last,                link_start_to='end')            last = 'first_pi2-'+str(i)+'-I'                                    self.seq.clone_channel(self.chan_mw_pm, self.chan_mwI, ename,                    start = self.params['MW_pulse_mod_risetime'],                    duration = 2 * self.params['MW_pulse_mod_risetime'],                     link_start_to = 'start',                     link_duration_to = 'duration',                    amplitude = 2.0)            ### interpulse delay            ename = 'tau1-'+str(i)            self.seq.add_element(name = ename, repetitions=self.params['interpulse_delays'][i])            self.seq.add_pulse('delay1'+str(i),                 channel = self.chan_RF,                element = ename,                amplitude = 0,                start = 0,                 duration = 1000)                                    ### the pi pulse                        ename = 'pi-'+str(i)            self.seq.add_element(name = ename)                                   self.seq.add_IQmod_pulse('pi-'+str(i),                 channel = (self.chan_mwI, self.chan_mwQ),                element = ename,                start = 0,                 duration = int(self.params['AWG_pi_duration']),                amplitude = self.params['AWG_pi_amp'],                 frequency = self.params['AWG_pi_mod_frq'])            last = 'pi-'+str(i)+'-I'                        self.seq.clone_channel(self.chan_mw_pm, self.chan_mwI, ename,                    start = self.params['MW_pulse_mod_risetime'],                    duration = 2 * self.params['MW_pulse_mod_risetime'],                     link_start_to = 'start',                     link_duration_to = 'duration',                    amplitude = 2.0)                                # add time before and after to make long enough, and symmetric            self.seq.add_pulse('wait_before',                 channel = self.chan_mwI,                element = ename,                amplitude = 0,                start = -500,                start_reference = last,                duration = 500,                link_start_to='start')                        self.seq.add_pulse('wait_after',                 channel = self.chan_mwI,                element = ename,                start = 0,                 amplitude = 0,                start_reference = last,                duration = 500,                link_start_to='end')                            ### interpulse delay            ename = 'tau2-'+str(i)            self.seq.add_element(name = ename, repetitions=self.params['interpulse_delays'][i])            self.seq.add_pulse('delay1'+str(i),                 channel = self.chan_RF,                amplitude = 0,                element = ename,                start = 0,                 duration = 1000)                        ###  second pi/2 pulse                        ename = 'second_pi2-'+str(i)            if i == self.params['pts'] - 1:                self.seq.add_element(name = ename, goto_target = 'MBI_pulse0-0')            else:                self.seq.add_element(name = ename)                                    self.seq.add_IQmod_pulse('second_pi2-'+str(i),                 channel = (self.chan_mwI, self.chan_mwQ),                element = ename,                start = 0,                 duration = int(self.params['AWG_2nd_pi2_durations'][i]),                amplitude = self.params['AWG_2nd_pi2_amps'][i],                 frequency = self.params['AWG_2nd_pi2_mod_frqs'][i],                phase = self.params['AWG_2nd_pi2_phases'][i])            last = 'second_pi2-'+str(i)+'-I'            first = 'second_pi2-'+str(i)+'-I'                        self.seq.clone_channel(self.chan_mw_pm, self.chan_mwI, ename,                    start = self.params['MW_pulse_mod_risetime'],                    duration = 2 * self.params['MW_pulse_mod_risetime'],                     link_start_to = 'start',                     link_duration_to = 'duration',                    amplitude = 2.0)                        # make sure PM is low at the beginning            self.seq.add_pulse('delay_start', self.chan_mw_pm, ename,                    start=-1, duration=1, amplitude=0,                    start_reference = first, #'RO_pulse-0-I',                    link_start_to = 'start')                        self.seq.add_pulse(name='seq_done',                    channel = self.chan_adwin_sync,                    element = ename,                    duration = 10000, #AWG_to_adwin_ttl_trigger_duration,                     amplitude = 2,                    start = 0,                    start_reference= last,#'RO_pulse-'+str(j)+'-I',                    link_start_to='end')            ### class LongEchodef _prepare(m):    m.params.from_dict(qt.cfgman['protocols']['AdwinSSRO'])    m.params.from_dict(qt.cfgman['protocols']['sil2-default']['AdwinSSRO'])    m.params.from_dict(qt.cfgman['protocols']['sil2-default']['AdwinSSRO-integrated'])        m.params.from_dict(qt.cfgman['protocols']['AdwinSSRO+MBI'])    m.params.from_dict(qt.cfgman['protocols']['sil2-default']['AdwinSSRO+MBI'])        m.params.from_dict(qt.cfgman['protocols']['sil2-default']['pulses'])        ssro.AdwinSSRO.repump_aom = qt.instruments['GreenAOM']    m.params['repump_duration'] = m.params['green_repump_duration']    m.params['repump_amplitude'] = m.params['green_repump_amplitude']def _finish(m):    m.autoconfig()    m.generate_sequence(send=True)    m.setup()    m.run()    m.save()    m.finish()    def echo_vs_tau2length(name):    m = CORPSEEcho(name)    _prepare(m)        # measurement settings    pts = 32    m.params['pts'] = pts    m.params['reps_per_ROsequence'] = 1000    m.params['pi_type'] = ''        # CORPSE pulse settings.    # m.params['AWG_uncond_CORPSE_mod_frq'] = m.params['AWG_MBI_MW_pulse_ssbmod_frq']    # m.params['AWG_uncond_CORPSE420_duration'] = 253 + 42 + 11    # m.params['AWG_uncond_CORPSE300_duration'] = (253 - 42 + 11)    # m.params['AWG_uncond_CORPSE60_duration'] = (57 + 11)        # m.params['AWG_uncond_CORPSE420_amp'] = 0.68 # m.params['AWG_uncond_CORPSE60_amp']     # m.params['AWG_uncond_CORPSE300_amp'] = 0.68     # m.params['AWG_uncond_CORPSE60_amp'] = 0.68        # echo msmt settings    m.params['AWG_pi2_duration'] = m.params['4MHz_pi2_duration']    m.params['AWG_pi2_amp'] = m.params['4MHz_pi2_amp']    m.params['AWG_pi2_mod_frq'] = m.params['4MHz_pi2_mod_frq']        m.params['AWG_2nd_pi2_durations'] = np.ones(pts) * m.params['4MHz_pi2_duration']    m.params['AWG_2nd_pi2_amps'] = np.ones(pts) * m.params['4MHz_pi2_amp']    m.params['AWG_2nd_pi2_mod_frqs'] = np.ones(pts) * m.params['4MHz_pi2_mod_frq']    m.params['AWG_2nd_pi2_phases'] = np.zeros(pts)        m.params['AWG_pi_duration'] = m.params['4MHz_pi_duration']    m.params['AWG_pi_amp'] = m.params['4MHz_pi_amp']    m.params['AWG_pi_mod_frq'] = m.params['4MHz_pi_mod_frq']        m.params['tau1s'] = np.ones(pts) * 8000    m.params['tau2s'] = 8000 + np.linspace(-6000,6000,pts)        # for the autoanalysis    m.params['sweep_name'] = 'tau2 (ns)'    m.params['sweep_pts'] =  m.params['tau2s']        _finish(m)def echo_vs_CORPSEstart(name):    m = CORPSEEcho(name)    _prepare(m)        # measurement settings    pts = 21    m.params['pts'] = pts    m.params['reps_per_ROsequence'] = 1000    m.params['pi_type'] = 'CORPSE'            # CORPSE pulse settings.        m.params['AWG_uncond_CORPSE_mod_frq'] = m.params['AWG_MBI_MW_pulse_ssbmod_frq'] + 2.187e6/4.    m.params['AWG_uncond_CORPSE420_duration'] = 253 + 42 + 11    m.params['AWG_uncond_CORPSE300_duration'] = (253 - 42 + 11)    m.params['AWG_uncond_CORPSE60_duration'] = (57 + 11)        m.params['AWG_uncond_CORPSE420_amp'] = 0.68 # m.params['AWG_uncond_CORPSE60_amp']     m.params['AWG_uncond_CORPSE300_amp'] = 0.68     m.params['AWG_uncond_CORPSE60_amp'] = 0.68        # echo msmt settings    m.params['AWG_pi2_duration'] = m.params['4MHz_pi2_duration']    m.params['AWG_pi2_amp'] = m.params['4MHz_pi2_amp']    m.params['AWG_pi2_mod_frq'] = m.params['4MHz_pi2_mod_frq']        m.params['AWG_2nd_pi2_durations'] = np.ones(pts) * m.params['4MHz_pi2_duration']    m.params['AWG_2nd_pi2_amps'] = np.ones(pts) * m.params['4MHz_pi2_amp']    m.params['AWG_2nd_pi2_mod_frqs'] = np.ones(pts) * m.params['4MHz_pi2_mod_frq']    m.params['AWG_2nd_pi2_phases'] = np.zeros(pts)        m.params['AWG_pi_duration'] = m.params['4MHz_pi_duration']    m.params['AWG_pi_amp'] = m.params['4MHz_pi_amp']    m.params['AWG_pi_mod_frq'] = m.params['4MHz_pi_mod_frq']        # Sweeping the start of the CORPSE pulse, within a fixed 2000 us total free evolution    m.params['tau1s'] = np.linspace(-500,500,pts) + 1000    m.params['tau2s'] = 2000 - m.params['tau1s']        # for the autoanalysis    m.params['sweep_name'] = 'tau1 (ns)'    m.params['sweep_pts'] =  m.params['tau1s']        _finish(m)def echo_vs_CORPSEdetuning(name):    m = CORPSEEcho(name)    _prepare(m)        # measurement settings    pts = 21    m.params['pts'] = pts    m.params['reps_per_ROsequence'] = 1000    m.params['pi_type'] = ''            # CORPSE pulse settings.        #Sweeping the detuning of the pi pulse.    detunings = np.linspace(-1e3,1e3,pts)    m.params['AWG_uncond_CORPSE_mod_frqs'] = m.params['AWG_MBI_MW_pulse_ssbmod_frq'] + detunings    m.params['AWG_uncond_CORPSE420_duration'] = 253 + 42 + 11    m.params['AWG_uncond_CORPSE300_duration'] = (253 - 42 + 11)    m.params['AWG_uncond_CORPSE60_duration'] = (46 + 11) # is 57 in total.        m.params['AWG_uncond_CORPSE420_amp'] = 0.68 # m.params['AWG_uncond_CORPSE60_amp']     m.params['AWG_uncond_CORPSE300_amp'] = 0.68     m.params['AWG_uncond_CORPSE60_amp'] = 0.68        # 4 Mhz pi pulse settings    m.params['AWG_pi_duration'] = m.params['4MHz_pi_duration']    m.params['AWG_pi_amp'] = m.params['4MHz_pi_amp']    m.params['AWG_pi_mod_frqs'] = m.params['4MHz_pi_mod_frq'] + detunings    # echo msmt settings    m.params['AWG_pi2_duration'] =  m.params['4MHz_pi2_duration']    m.params['AWG_pi2_amp'] = m.params['4MHz_pi2_amp']    m.params['AWG_pi2_mod_frq'] = m.params['4MHz_pi2_mod_frq']        m.params['AWG_2nd_pi2_durations'] = np.ones(pts) * m.params['4MHz_pi2_duration']    m.params['AWG_2nd_pi2_amps'] = np.ones(pts) * m.params['4MHz_pi2_amp']    m.params['AWG_2nd_pi2_mod_frqs'] = np.ones(pts) * m.params['4MHz_pi2_mod_frq']    m.params['AWG_2nd_pi2_phases'] = np.zeros(pts)         # Fixed 2000 us total free evolution    m.params['tau1s'] = np.ones(pts) * 1000    m.params['tau2s'] = np.ones(pts) * 1000        # for the autoanalysis    m.params['sweep_name'] = 'detuning (Hz)'    m.params['sweep_pts'] =  detunings        _finish(m)        def echo_vs_CORPSEphase(name):    m = CORPSEEcho(name)    _prepare(m)        # measurement settings    pts = 21    m.params['pts'] = pts    m.params['reps_per_ROsequence'] = 1000    m.params['pi_type'] = ''            # CORPSE pulse settings.        #Sweeping the detuning of the pi pulse.       m.params['AWG_uncond_CORPSE_mod_frqs'] = m.params['AWG_MBI_MW_pulse_ssbmod_frq']     m.params['AWG_uncond_CORPSE420_duration'] = 253 + 42 + 11    m.params['AWG_uncond_CORPSE300_duration'] = (253 - 42 + 11)    m.params['AWG_uncond_CORPSE60_duration'] = (46 + 11) # is 57 in total.        m.params['AWG_uncond_CORPSE420_amp'] = 0.68 # m.params['AWG_uncond_CORPSE60_amp']     m.params['AWG_uncond_CORPSE300_amp'] = 0.68     m.params['AWG_uncond_CORPSE60_amp'] = 0.68        phases = np.linspace(-90,90,pts)    m.params['AWG_uncond_CORPSE_mod_frqs'] = m.params['AWG_MBI_MW_pulse_ssbmod_frq']         # 4 Mhz pi pulse settings    m.params['AWG_pi_duration'] = m.params['4MHz_pi_duration']    m.params['AWG_pi_amp'] = m.params['4MHz_pi_amp']    m.params['AWG_pi_mod_frqs'] = m.params['4MHz_pi_mod_frq'] + detunings    # echo msmt settings    m.params['AWG_pi2_duration'] =  m.params['4MHz_pi2_duration']    m.params['AWG_pi2_amp'] = m.params['4MHz_pi2_amp']    m.params['AWG_pi2_mod_frq'] = m.params['4MHz_pi2_mod_frq']        m.params['AWG_2nd_pi2_durations'] = np.ones(pts) * m.params['4MHz_pi2_duration']    m.params['AWG_2nd_pi2_amps'] = np.ones(pts) * m.params['4MHz_pi2_amp']    m.params['AWG_2nd_pi2_mod_frqs'] = np.ones(pts) * m.params['4MHz_pi2_mod_frq']    m.params['AWG_2nd_pi2_phases'] = np.zeros(pts)         # Fixed 2000 us total free evolution    m.params['tau1s'] = np.ones(pts) * 1000    m.params['tau2s'] = np.ones(pts) * 1000        # for the autoanalysis    m.params['sweep_name'] = 'detuning (Hz)'    m.params['sweep_pts'] =  detunings        _finish(m)                def echo_vs_tau2phase(name):    m = CORPSEEcho(name)    _prepare(m)        # measurement settings    pts = 17    m.params['pts'] = pts    m.params['reps_per_ROsequence'] = 1000    m.params['pi_type'] = ''        # echo msmt settings    m.params['AWG_pi2_duration'] = m.params['4MHz_pi2_duration']    m.params['AWG_pi2_amp'] = m.params['4MHz_pi2_amp']    m.params['AWG_pi2_mod_frq'] = m.params['4MHz_pi2_mod_frq']        m.params['AWG_2nd_pi2_durations'] = np.ones(pts) * m.params['4MHz_pi2_duration']    m.params['AWG_2nd_pi2_amps'] = np.ones(pts) * m.params['4MHz_pi2_amp']    m.params['AWG_2nd_pi2_mod_frqs'] = np.ones(pts) * m.params['4MHz_pi2_mod_frq']    m.params['AWG_2nd_pi2_phases'] = np.linspace(0, 360, pts)        m.params['AWG_pi_duration'] = m.params['4MHz_pi_duration']    m.params['AWG_pi_amp'] = m.params['4MHz_pi_amp']    m.params['AWG_pi_mod_frq'] = m.params['4MHz_pi_mod_frq']        m.params['tau1s'] = np.ones(pts) * 8000    m.params['tau2s'] = np.ones(pts) * 8000        # for the autoanalysis    m.params['sweep_name'] = 'tau2-phase (deg)'    m.params['sweep_pts'] =  m.params['AWG_2nd_pi2_phases']        _finish(m)   def echo_vs_2taulength(name):    m = CORPSEEcho(name)    _prepare(m)        # measurement settings    pts = 32    m.params['pts'] = pts    m.params['reps_per_ROsequence'] = 1000    m.params['pi_type'] = ''        # echo msmt settings    m.params['AWG_pi2_duration'] = m.params['4MHz_pi2_duration']    m.params['AWG_pi2_amp'] = m.params['4MHz_pi2_amp']    m.params['AWG_pi2_mod_frq'] = m.params['4MHz_pi2_mod_frq']        m.params['AWG_2nd_pi2_durations'] = np.ones(pts) * m.params['4MHz_pi2_duration']    m.params['AWG_2nd_pi2_amps'] = np.ones(pts) * m.params['4MHz_pi2_amp']    m.params['AWG_2nd_pi2_mod_frqs'] = np.ones(pts) * m.params['4MHz_pi2_mod_frq']    m.params['AWG_2nd_pi2_phases'] = np.zeros(pts)        m.params['AWG_pi_duration'] = m.params['4MHz_pi_duration']    m.params['AWG_pi_amp'] = m.params['4MHz_pi_amp']    m.params['AWG_pi_mod_frq'] = m.params['4MHz_pi_mod_frq']        m.params['tau1s'] = np.linspace(1000,32000,pts)    m.params['tau2s'] = np.linspace(1000,32000,pts)        # for the autoanalysis    m.params['sweep_name'] = 'tau (ns)'    m.params['sweep_pts'] =  m.params['tau2s']        _finish(m)    def T2(name):    m = LongEcho(name)    _prepare(m)        # measurement settings    pts = 33    m.params['pts'] = pts    m.params['reps_per_ROsequence'] = 1000        # echo msmt settings    m.params['AWG_pi2_duration'] = m.params['4MHz_pi2_duration']    m.params['AWG_pi2_amp'] = m.params['4MHz_pi2_amp']    m.params['AWG_pi2_mod_frq'] = m.params['4MHz_pi2_mod_frq']        m.params['AWG_2nd_pi2_durations'] = np.ones(pts) * m.params['4MHz_pi2_duration']    m.params['AWG_2nd_pi2_amps'] = np.ones(pts) * m.params['4MHz_pi2_amp']    m.params['AWG_2nd_pi2_mod_frqs'] = np.ones(pts) * m.params['4MHz_pi2_mod_frq']    m.params['AWG_2nd_pi2_phases'] = np.zeros(pts)        m.params['AWG_pi_duration'] = m.params['4MHz_pi_duration']    m.params['AWG_pi_amp'] = m.params['4MHz_pi_amp']    m.params['AWG_pi_mod_frq'] = m.params['4MHz_pi_mod_frq']        # m.params['tau1s'] = np.linspace(1000,32000,pts)    # m.params['tau2s'] = np.linspace(1000,32000,pts)    a1 = np.arange(1,pts/3+1) * 50.4    a2 = a1 - 2    a3 = a1 + 2    a = np.sort(np.append(np.append(a1, a2), a3)).astype(int)       m.params['interpulse_delays'] = a    # for the autoanalysis    m.params['sweep_name'] = 'interpulse delay (us)'    m.params['sweep_pts'] = m.params['interpulse_delays']        #m.autoconfig()    #m.generate_sequence()        _finish(m)    def T2(name):    m = LongEcho(name)    _prepare(m)        # measurement settings    pts = 33    m.params['pts'] = pts    m.params['reps_per_ROsequence'] = 1000        # echo msmt settings    m.params['AWG_pi2_duration'] = m.params['4MHz_pi2_duration']    m.params['AWG_pi2_amp'] = m.params['4MHz_pi2_amp']    m.params['AWG_pi2_mod_frq'] = m.params['4MHz_pi2_mod_frq']        m.params['AWG_2nd_pi2_durations'] = np.ones(pts) * m.params['4MHz_pi2_duration']    m.params['AWG_2nd_pi2_amps'] = np.ones(pts) * m.params['4MHz_pi2_amp']    m.params['AWG_2nd_pi2_mod_frqs'] = np.ones(pts) * m.params['4MHz_pi2_mod_frq']    m.params['AWG_2nd_pi2_phases'] = np.zeros(pts)        m.params['AWG_pi_duration'] = m.params['4MHz_pi_duration']    m.params['AWG_pi_amp'] = m.params['4MHz_pi_amp']    m.params['AWG_pi_mod_frq'] = m.params['4MHz_pi_mod_frq']        # m.params['tau1s'] = np.linspace(1000,32000,pts)    # m.params['tau2s'] = np.linspace(1000,32000,pts)    a1 = np.arange(1,pts/3+1) * 50.4    a2 = a1 - 2    a3 = a1 + 2    a = np.sort(np.append(np.append(a1, a2), a3)).astype(int)       m.params['interpulse_delays'] = a    # for the autoanalysis    m.params['sweep_name'] = 'interpulse delay (us)'    m.params['sweep_pts'] = m.params['interpulse_delays']        #m.autoconfig()    #m.generate_sequence()        _finish(m)        