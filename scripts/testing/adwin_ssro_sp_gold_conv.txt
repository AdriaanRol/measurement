      CASE 2    ' Ex or A laser spin pumping
        IF (timer = 0) THEN
          'DAC( repump_laser_DAC_channel, 3277*repump_voltage+32768) ' turn on Ex laser XXXXXX
          DAC( Ex_laser_DAC_channel, 3277*Ex_SP_voltage+32768) ' turn on Ex laser
          DAC( A_laser_DAC_channel, 3277*A_SP_voltage+32768)   ' turn on A laser
          CNT_CLEAR(  counter_pattern)    'clear counter
          CNT_ENABLE( counter_pattern)    'turn on counter
          old_counts = 0
        ELSE 
          counts = CNT_READ( counter_channel)
          DATA_24[timer] = DATA_24[timer] + counts - old_counts

          old_counts = counts
          IF (timer = SP_duration) THEN
            CNT_ENABLE( 0)
            IF (SP_filter_duration = 0) THEN
              DAC( repump_laser_DAC_channel, 3277*0+32768) ' turn off Ex laser XXXXXX
              DAC( Ex_laser_DAC_channel, 3277*Ex_off_voltage+32768) ' turn off Ex laser
              DAC( A_laser_DAC_channel, 3277*A_off_voltage+32768) ' turn off A laser
              IF ((send_AWG_start > 0) or (sequence_wait_time > 0)) THEN
                mode = 4
              ELSE
                mode = 5
              ENDIF
              wait_after_pulse = wait_after_pulse_duration
            ELSE
              mode = 3
              wait_after_pulse = 0
            ENDIF
            timer = -1
          ENDIF
        ENDIF
      CASE 3    ' SP filter (postselection)
        IF (timer = 0) THEN
          CNT_CLEAR(  counter_pattern)    'clear counter
          CNT_ENABLE( counter_pattern)    'turn on counter
        ELSE 
          IF (timer = SP_filter_duration) THEN
            DAC( Ex_laser_DAC_channel, 3277*Ex_off_voltage+32768) ' turn off Ex laser
            DAC( A_laser_DAC_channel, 3277*A_off_voltage+32768) ' turn off A laser
            counts = CNT_READ( counter_channel)
            CNT_ENABLE( 0)
            IF (counts > 0) THEN
              mode = 1
            ELSE
              IF ((send_AWG_start > 0) or (sequence_wait_time > 0)) THEN
                mode = 4
              ELSE
                mode = 5
              ENDIF
            ENDIF
            timer = -1
            wait_after_pulse = wait_after_pulse_duration
          ENDIF
        ENDIF
      CASE 4    '  wait for AWG sequence or for fixed duration
        IF (timer = 0) THEN
          IF (send_AWG_start > 0) THEN
            DIGOUT(AWG_start_DO_channel,1)  ' AWG trigger
            CPU_SLEEP(9)               ' need >= 20ns pulse width; adwin needs >= 9 as arg, which is 9*10ns
            DIGOUT(AWG_start_DO_channel,0)
          ENDIF
          aux_timer = 0
          AWG_done = 0
        ELSE 
          IF (wait_for_AWG_done > 0) THEN 
            IF (AWG_done = 0) THEN
              IF (DIGIN(AWG_done_DI_pattern) > 0) THEN
                AWG_done = 1
                IF (sequence_wait_time > 0) THEN
                  aux_timer = timer
                ELSE
                  mode = 5
                  timer = -1
                  wait_after_pulse = 0
                ENDIF
              ENDIF
            ELSE
              IF (timer - aux_timer >= sequence_wait_time) THEN
                mode = 5
                timer = -1
                wait_after_pulse = 0
              ENDIF
            ENDIF
          ELSE
            IF (timer >= sequence_wait_time) THEN
              mode = 5
              timer = -1
              wait_after_pulse = 0
              'ELSE
              'CPU_SLEEP(9)
            ENDIF
          ENDIF
        ENDIF